package com.springbootjpa.datajpa.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.springbootjpa.datajpa.dto.UsersDTO;
import com.springbootjpa.datajpa.dto.common.ResponseEntity;
import com.springbootjpa.datajpa.entity.Users;
import com.springbootjpa.datajpa.repository.UserRepository;

@Service
public class UserServiceImpl implements IUserService {

	@Autowired
	UserRepository repo;

	@Override
	public ResponseEntity registerUser(UsersDTO userInfo) throws Exception {
		try {
			boolean isUserExist = repo.existsByUserNameIgnoreCase(userInfo.getUserName());
			if (isUserExist) {
				throw new Exception("User already Exist");
			} else {
				Users user = new Users();
				BeanUtils.copyProperties(userInfo, user, "id");
				repo.save(user);
				return userInfo;
			}

		} catch (Exception e) {
			throw new Exception("Server Error");
		}
	}


	@Override
	public ResponseEntity authenticateUser(UsersDTO loginInfo) throws Exception {
		try {
			Users user = repo.findByUserNameIgnoreCaseAndPassword(loginInfo.getUserName(),
					loginInfo.getPassword());
			if (null == user) {
				throw new Exception("Invalid Password or UserName");
			} else {
				loginInfo.setUserId(user.getId());
				loginInfo.setUserName(null);
				loginInfo.setPassword(null);
				loginInfo.setFirstName(user.getFirstName());
				loginInfo.setLastName(user.getLastName());
				loginInfo.setId(1L);
				return loginInfo;
			}
		} catch (Exception e) {
			throw new Exception("Server Error");
		}
		
	}

	@Override
	public ResponseEntity updateUserProfile(UsersDTO userInfo) throws Exception {
		try {
			if (null == userInfo.getUserId()) {
				throw new Exception("User ID is not available in the request");
				
			}

			Optional<Users> userOpt = repo.findById(userInfo.getUserId());
			if (!userOpt.isPresent()) {
				throw new Exception("Not Valid");
			} else {
				Users exUser = repo.findByUserNameIgnoreCase(userInfo.getUserName());
				if (null != exUser && !exUser.getId().equals(userInfo.getUserId())) {
					throw new Exception("Not Valid");
				} else {
					Users user = new Users();
					BeanUtils.copyProperties(userInfo, user, "id");
					user.setId(userInfo.getUserId());
					repo.save(user);
					return userInfo;
				}
			}
		} catch (Exception e) {
			throw new Exception("Server Error");

		}
	}


	@Override
	public List<Users> getAllUsers() {
		return repo.findAll();
	}
	
}
